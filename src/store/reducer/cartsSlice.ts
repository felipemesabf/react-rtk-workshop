import {
  createEntityAdapter,
  createSelector,
  createSlice,
} from "@reduxjs/toolkit";

import { RootState } from "../store";
import apiSlice from "../api/apiSlice";

// Generated by https://quicktype.io

export interface CartState {
  id: number;
  userId: number;
  date: string;
  products: Product[];
  __v: number;
}

export interface Product {
  productId: number;
  quantity: number;
}

const cartAdapter = createEntityAdapter<CartState>({
  selectId: (cart) => cart.id,
});

const initialState = cartAdapter.getInitialState({});

const extendedAuthApi = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    getCarts: builder.query({
      query: () => ({
        url: "carts",
      }),
      transformResponse: (response: CartState[]): CartState[] => response,
    }),
  }),
});

export const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder.addMatcher(
      extendedAuthApi.endpoints.getCarts.matchFulfilled,
      (state, { payload }) => {
        cartAdapter.setAll(state, payload);
      }
    );
  },
});

// Reducers
export const { useGetCartsQuery } = extendedAuthApi;

// Selectors
const { selectById, selectAll } = cartAdapter.getSelectors();

const any = (state: RootState) => state.cart;

export const selectCart = (id: number) =>
  createSelector(any, (state) => selectById(state, id));

export const selectCarts = createSelector(any, (state) => selectAll(state));
